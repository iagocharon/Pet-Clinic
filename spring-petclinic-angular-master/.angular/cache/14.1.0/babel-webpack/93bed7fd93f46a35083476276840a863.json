{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/** Handles HttpClient errors */\n\nexport var HttpErrorHandler = /*#__PURE__*/function () {\n  function HttpErrorHandler() {\n    var _this = this;\n\n    _classCallCheck(this, HttpErrorHandler);\n\n    /** Create curried handleError function that already knows the service name */\n    this.createHandleError = function () {\n      var serviceName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return function () {\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return _this.handleError(serviceName, operation, result);\n      };\n    };\n  }\n  /**\n   * Returns a function that handles Http operation failures.\n   * @param serviceName = name of the data service that attempted the operation\n   * @param operation - name of the operation that failed\n   * @param result - type of a valid result\n   */\n\n\n  _createClass(HttpErrorHandler, [{\n    key: \"handleError\",\n    value: function handleError() {\n      var serviceName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'operation';\n      var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return function (error) {\n        var message = error.error instanceof ErrorEvent ? error.error.message : \"server returned code \".concat(error.status, \" with body \\\"\").concat(error.error, \"\\\"\");\n        var errorsHeader = error.headers.get('errors');\n\n        if (errorsHeader) {\n          var errors = JSON.parse(errorsHeader); // Retrieve the Spring MVC errorMessage of the first FieldError\n\n          if (errors instanceof Array && errors.length > 0 && errors[0].errorMessage) {\n            message = errors[0].errorMessage;\n          }\n        }\n\n        console.error(error);\n        console.error(\"\".concat(serviceName, \"::\").concat(operation, \" failed: \").concat(message));\n        return throwError(message);\n      };\n    }\n  }]);\n\n  return HttpErrorHandler;\n}();\n\nHttpErrorHandler.ɵfac = function HttpErrorHandler_Factory(t) {\n  return new (t || HttpErrorHandler)();\n};\n\nHttpErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpErrorHandler,\n  factory: HttpErrorHandler.ɵfac\n});","map":{"version":3,"mappings":";;AAyBA,SAAoBA,UAApB,QAAqC,MAArC;;AAMA;;AAEA,WAAaC,gBAAb;EADA;IAAA;;IAAA;;IAGE;IACA,yBAAoB;MAAA,IAACC,WAAD,uEAAe,EAAf;MAAA,OAAsB;QAAA,IACzCC,SADyC,uEAC7B,WAD6B;QAAA,IAChBC,MADgB,uEACP,EADO;QAAA,OACK,KAAI,CAACC,WAAL,CAAiBH,WAAjB,EAA8BC,SAA9B,EAAyCC,MAAzC,CADL;MAAA,CAAtB;IAAA,CAApB;EAgCD;EA7BC;;;;;;;;EANF;IAAA;IAAA,OAYE,uBAA0E;MAAA,IAA3DF,WAA2D,uEAA7C,EAA6C;MAAA,IAAzCC,SAAyC,uEAA7B,WAA6B;MAAA,IAAhBC,MAAgB,uEAAP,EAAO;MAExE,OAAO,UAACE,KAAD,EAA4C;QAEjD,IAAIC,OAAO,GAAID,KAAK,CAACA,KAAN,YAAuBE,UAAxB,GACZF,KAAK,CAACA,KAAN,CAAYC,OADA,kCAEYD,KAAK,CAACG,MAFlB,0BAEuCH,KAAK,CAACA,KAF7C,OAAd;QAGA,IAAMI,YAAY,GAAGJ,KAAK,CAACK,OAAN,CAAcC,GAAd,CAAkB,QAAlB,CAArB;;QACA,IAAIF,YAAJ,EAAkB;UAChB,IAAMG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAX,CAAf,CADgB,CAEhB;;UACA,IAAKG,MAAM,YAAYG,KAAnB,IAA8BH,MAAM,CAACI,MAAP,GAAgB,CAA9C,IAAoDJ,MAAM,CAAC,CAAD,CAAN,CAAUK,YAAlE,EAAgF;YAC9EX,OAAO,GAAGM,MAAM,CAAC,CAAD,CAAN,CAAUK,YAApB;UACD;QACF;;QAEDC,OAAO,CAACb,KAAR,CAAcA,KAAd;QACAa,OAAO,CAACb,KAAR,WAAiBJ,WAAjB,eAAiCC,SAAjC,sBAAsDI,OAAtD;QAEA,OAAOP,UAAU,CAACO,OAAD,CAAjB;MACD,CAlBD;IAoBD;EAlCH;;EAAA;AAAA;;;mBAAaN;AAAgB;;;SAAhBA;EAAgBmB,SAAhBnB,gBAAgB","names":["throwError","HttpErrorHandler","serviceName","operation","result","handleError","error","message","ErrorEvent","status","errorsHeader","headers","get","errors","JSON","parse","Array","length","errorMessage","console","factory"],"sourceRoot":"","sources":["/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/src/app/error.service.ts"],"sourcesContent":["/*\n *\n *  * Copyright 2016-2018 the original author or authors.\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *      http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */\n\n/**\n * @author Antoine Rey\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpErrorResponse} from '@angular/common/http';\n\nimport {Observable, throwError} from 'rxjs';\n\n/** Type of the handleError function returned by HttpErrorHandler.createHandleError */\nexport type HandleError =\n  <T> (operation?: string, result?: T) => (error: HttpErrorResponse) => Observable<T>;\n\n/** Handles HttpClient errors */\n@Injectable()\nexport class HttpErrorHandler {\n\n  /** Create curried handleError function that already knows the service name */\n  createHandleError = (serviceName = '') => <T>\n  (operation = 'operation', result = {} as T) => this.handleError(serviceName, operation, result)\n\n  /**\n   * Returns a function that handles Http operation failures.\n   * @param serviceName = name of the data service that attempted the operation\n   * @param operation - name of the operation that failed\n   * @param result - type of a valid result\n   */\n  handleError<T>(serviceName = '', operation = 'operation', result = {} as T) {\n\n    return (error: HttpErrorResponse): Observable<T> => {\n\n      let message = (error.error instanceof ErrorEvent) ?\n        error.error.message :\n        `server returned code ${error.status} with body \"${error.error}\"`;\n      const errorsHeader = error.headers.get('errors');\n      if (errorsHeader) {\n        const errors = JSON.parse(errorsHeader);\n        // Retrieve the Spring MVC errorMessage of the first FieldError\n        if ((errors instanceof Array) && (errors.length > 0) && errors[0].errorMessage) {\n          message = errors[0].errorMessage;\n        }\n      }\n\n      console.error(error);\n      console.error(`${serviceName}::${operation} failed: ${message}`);\n\n      return throwError(message);\n    };\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}