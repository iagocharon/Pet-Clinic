{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from '../error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport var PetService = /*#__PURE__*/function () {\n  function PetService(http, httpErrorHandler) {\n    _classCallCheck(this, PetService);\n\n    this.http = http;\n    this.httpErrorHandler = httpErrorHandler;\n    this.entityUrl = environment.REST_API_URL + 'pets';\n    this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n  }\n\n  _createClass(PetService, [{\n    key: \"getPets\",\n    value: function getPets() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError('getPets', [])));\n    }\n  }, {\n    key: \"getPetById\",\n    value: function getPetById(petId) {\n      return this.http.get(this.entityUrl + '/' + petId).pipe(catchError(this.handlerError('getPetById', {})));\n    }\n  }, {\n    key: \"addPet\",\n    value: function addPet(pet) {\n      return this.http.post(this.entityUrl, pet).pipe(catchError(this.handlerError('addPet', pet)));\n    }\n  }, {\n    key: \"updatePet\",\n    value: function updatePet(petId, pet) {\n      return this.http.put(this.entityUrl + '/' + petId, pet).pipe(catchError(this.handlerError('updatePet', pet)));\n    }\n  }, {\n    key: \"deletePet\",\n    value: function deletePet(petId) {\n      return this.http.delete(this.entityUrl + '/' + petId).pipe(catchError(this.handlerError('deletePet', 0)));\n    }\n  }]);\n\n  return PetService;\n}();\n\nPetService.ɵfac = function PetService_Factory(t) {\n  return new (t || PetService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n};\n\nPetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PetService,\n  factory: PetService.ɵfac\n});","map":{"version":3,"mappings":";;AAuBA,SAAQA,WAAR,QAA0B,gCAA1B;AAGA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAAQC,UAAR,QAAyB,gBAAzB;AACA,SAAqBC,gBAArB,QAA4C,kBAA5C;;;;AAGA,WAAaC,UAAb;EAME,oBAAoBC,IAApB,EAA8CC,gBAA9C,EAAgF;IAAA;;IAA5D;IAA0B;IAJtC,iBAAYN,WAAW,CAACO,YAAZ,GAA2B,MAAvC;IAKN,KAAKC,YAAL,GAAoBF,gBAAgB,CAACG,iBAAjB,CAAmC,cAAnC,CAApB;EACD;;EARH;IAAA;IAAA,OAUE,mBAAO;MACL,OAAO,KAAKJ,IAAL,CAAUK,GAAV,CAAqB,KAAKC,SAA1B,EACJC,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,SAAlB,EAA6B,EAA7B,CAAD,CAFP,CAAP;IAID;EAfH;IAAA;IAAA,OAiBE,oBAAWK,KAAX,EAAwB;MACtB,OAAO,KAAKR,IAAL,CAAUK,GAAV,CAAmB,KAAKC,SAAL,GAAiB,GAAjB,GAAuBE,KAA1C,EACJD,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,YAAlB,EAAgC,EAAhC,CAAD,CAFP,CAAP;IAID;EAtBH;IAAA;IAAA,OAwBE,gBAAOM,GAAP,EAAe;MACb,OAAO,KAAKT,IAAL,CAAUU,IAAV,CAAoB,KAAKJ,SAAzB,EAAoCG,GAApC,EACJF,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,QAAlB,EAA4BM,GAA5B,CAAD,CAFP,CAAP;IAID;EA7BH;IAAA;IAAA,OA+BE,mBAAUD,KAAV,EAAyBC,GAAzB,EAAiC;MAC/B,OAAO,KAAKT,IAAL,CAAUW,GAAV,CAAmB,KAAKL,SAAL,GAAiB,GAAjB,GAAuBE,KAA1C,EAAiDC,GAAjD,EACJF,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,WAAlB,EAA+BM,GAA/B,CAAD,CAFP,CAAP;IAID;EApCH;IAAA;IAAA,OAsCE,mBAAUD,KAAV,EAAuB;MACrB,OAAO,KAAKR,IAAL,CAAUY,MAAV,CAAyB,KAAKN,SAAL,GAAiB,GAAjB,GAAuBE,KAAhD,EACJD,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,WAAlB,EAA+B,CAA/B,CAAD,CAFP,CAAP;IAID;EA3CH;;EAAA;AAAA;;;mBAAaJ,YAAUc;AAAA;;;SAAVd;EAAUe,SAAVf,UAAU","names":["environment","HttpClient","catchError","HttpErrorHandler","PetService","http","httpErrorHandler","REST_API_URL","handlerError","createHandleError","get","entityUrl","pipe","petId","pet","post","put","delete","i0","factory"],"sourceRoot":"","sources":["/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/src/app/pets/pet.service.ts"],"sourcesContent":["/*\n *\n *  * Copyright 2016-2017 the original author or authors.\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *      http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */\n\n/**\n * @author Vitaliy Fedoriv\n */\n\nimport {Injectable} from '@angular/core';\nimport {environment} from '../../environments/environment';\nimport {Observable} from 'rxjs';\nimport {Pet} from './pet';\nimport {HttpClient} from '@angular/common/http';\nimport {catchError} from 'rxjs/operators';\nimport {HandleError, HttpErrorHandler} from '../error.service';\n\n@Injectable()\nexport class PetService {\n\n  private entityUrl = environment.REST_API_URL + 'pets';\n\n  private readonly handlerError: HandleError;\n\n  constructor(private http: HttpClient, private httpErrorHandler: HttpErrorHandler) {\n    this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n  }\n\n  getPets(): Observable<Pet[]> {\n    return this.http.get<Pet[]>(this.entityUrl)\n      .pipe(\n        catchError(this.handlerError('getPets', []))\n      );\n  }\n\n  getPetById(petId: string): Observable<Pet> {\n    return this.http.get<Pet>(this.entityUrl + '/' + petId)\n      .pipe(\n        catchError(this.handlerError('getPetById', {} as Pet))\n      );\n  }\n\n  addPet(pet: Pet): Observable<Pet> {\n    return this.http.post<Pet>(this.entityUrl, pet)\n      .pipe(\n        catchError(this.handlerError('addPet', pet))\n      );\n  }\n\n  updatePet(petId: string, pet: Pet): Observable<Pet> {\n    return this.http.put<Pet>(this.entityUrl + '/' + petId, pet)\n      .pipe(\n        catchError(this.handlerError('updatePet', pet))\n      );\n  }\n\n  deletePet(petId: string): Observable<number> {\n    return this.http.delete<number>(this.entityUrl + '/' + petId)\n      .pipe(\n        catchError(this.handlerError('deletePet', 0))\n      );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}