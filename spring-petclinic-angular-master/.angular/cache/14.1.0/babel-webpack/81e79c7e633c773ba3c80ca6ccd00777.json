{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/** Handles HttpClient errors */\n\nexport var HttpErrorHandler = /*#__PURE__*/(function () {\n  var HttpErrorHandler = /*#__PURE__*/function () {\n    function HttpErrorHandler() {\n      var _this = this;\n\n      _classCallCheck(this, HttpErrorHandler);\n\n      /** Create curried handleError function that already knows the service name */\n      this.createHandleError = function () {\n        var serviceName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        return function () {\n          var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n          var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          return _this.handleError(serviceName, operation, result);\n        };\n      };\n    }\n    /**\n     * Returns a function that handles Http operation failures.\n     * @param serviceName = name of the data service that attempted the operation\n     * @param operation - name of the operation that failed\n     * @param result - type of a valid result\n     */\n\n\n    _createClass(HttpErrorHandler, [{\n      key: \"handleError\",\n      value: function handleError() {\n        var serviceName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'operation';\n        var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return function (error) {\n          var message = error.error instanceof ErrorEvent ? error.error.message : \"server returned code \".concat(error.status, \" with body \\\"\").concat(error.error, \"\\\"\");\n          var errorsHeader = error.headers.get('errors');\n\n          if (errorsHeader) {\n            var errors = JSON.parse(errorsHeader); // Retrieve the Spring MVC errorMessage of the first FieldError\n\n            if (errors instanceof Array && errors.length > 0 && errors[0].errorMessage) {\n              message = errors[0].errorMessage;\n            }\n          }\n\n          console.error(error);\n          console.error(\"\".concat(serviceName, \"::\").concat(operation, \" failed: \").concat(message));\n          return throwError(message);\n        };\n      }\n    }]);\n\n    return HttpErrorHandler;\n  }();\n\n  HttpErrorHandler.ɵfac = function HttpErrorHandler_Factory(t) {\n    return new (t || HttpErrorHandler)();\n  };\n\n  HttpErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorHandler,\n    factory: HttpErrorHandler.ɵfac\n  });\n  return HttpErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}