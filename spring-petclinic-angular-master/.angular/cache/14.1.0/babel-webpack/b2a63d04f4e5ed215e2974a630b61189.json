{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from '../error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport var OwnerService = /*#__PURE__*/function () {\n  function OwnerService(http, httpErrorHandler) {\n    _classCallCheck(this, OwnerService);\n\n    this.http = http;\n    this.httpErrorHandler = httpErrorHandler;\n    this.entityUrl = environment.REST_API_URL + 'owners';\n    this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n  }\n\n  _createClass(OwnerService, [{\n    key: \"getOwners\",\n    value: function getOwners() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError('getOwners', [])));\n    }\n  }, {\n    key: \"getOwnerById\",\n    value: function getOwnerById(ownerId) {\n      return this.http.get(this.entityUrl + '/' + ownerId).pipe(catchError(this.handlerError('getOwnerById', {})));\n    }\n  }, {\n    key: \"addOwner\",\n    value: function addOwner(owner) {\n      return this.http.post(this.entityUrl, owner).pipe(catchError(this.handlerError('addOwner', owner)));\n    }\n  }, {\n    key: \"updateOwner\",\n    value: function updateOwner(ownerId, owner) {\n      return this.http.put(this.entityUrl + '/' + ownerId, owner).pipe(catchError(this.handlerError('updateOwner', owner)));\n    }\n  }, {\n    key: \"deleteOwner\",\n    value: function deleteOwner(ownerId) {\n      return this.http.delete(this.entityUrl + '/' + ownerId).pipe(catchError(this.handlerError('deleteOwner', [ownerId])));\n    }\n  }]);\n\n  return OwnerService;\n}();\n\nOwnerService.ɵfac = function OwnerService_Factory(t) {\n  return new (t || OwnerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n};\n\nOwnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OwnerService,\n  factory: OwnerService.ɵfac\n});","map":{"version":3,"mappings":";;AAyBA,SAAQA,WAAR,QAA0B,gCAA1B;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAAQC,UAAR,QAAyB,gBAAzB;AACA,SAAqBC,gBAArB,QAA4C,kBAA5C;;;;AAIA,WAAaC,YAAb;EAME,sBAAoBC,IAApB,EAA8CC,gBAA9C,EAAgF;IAAA;;IAA5D;IAA0B;IAJ9C,iBAAYN,WAAW,CAACO,YAAZ,GAA2B,QAAvC;IAKE,KAAKC,YAAL,GAAoBF,gBAAgB,CAACG,iBAAjB,CAAmC,cAAnC,CAApB;EACD;;EARH;IAAA;IAAA,OAUE,qBAAS;MACP,OAAO,KAAKJ,IAAL,CAAUK,GAAV,CAAuB,KAAKC,SAA5B,EACJC,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,WAAlB,EAA+B,EAA/B,CAAD,CAFP,CAAP;IAID;EAfH;IAAA;IAAA,OAiBE,sBAAaK,OAAb,EAA4B;MAC1B,OAAO,KAAKR,IAAL,CAAUK,GAAV,CAAqB,KAAKC,SAAL,GAAiB,GAAjB,GAAuBE,OAA5C,EACJD,IADI,CAEDV,UAAU,CAAC,KAAKM,YAAL,CAAkB,cAAlB,EAAkC,EAAlC,CAAD,CAFT,CAAP;IAID;EAtBH;IAAA;IAAA,OAwBE,kBAASM,KAAT,EAAqB;MACnB,OAAO,KAAKT,IAAL,CAAUU,IAAV,CAAsB,KAAKJ,SAA3B,EAAsCG,KAAtC,EACJF,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,UAAlB,EAA8BM,KAA9B,CAAD,CAFP,CAAP;IAID;EA7BH;IAAA;IAAA,OA+BE,qBAAYD,OAAZ,EAA6BC,KAA7B,EAAyC;MACvC,OAAO,KAAKT,IAAL,CAAUW,GAAV,CAAqB,KAAKL,SAAL,GAAiB,GAAjB,GAAuBE,OAA5C,EAAqDC,KAArD,EACJF,IADI,CAEHV,UAAU,CAAC,KAAKM,YAAL,CAAkB,aAAlB,EAAiCM,KAAjC,CAAD,CAFP,CAAP;IAID;EApCH;IAAA;IAAA,OAsCE,qBAAYD,OAAZ,EAA2B;MACzB,OAAO,KAAKR,IAAL,CAAUY,MAAV,CAAwB,KAAKN,SAAL,GAAiB,GAAjB,GAAuBE,OAA/C,EACJD,IADI,CAEFV,UAAU,CAAC,KAAKM,YAAL,CAAkB,aAAlB,EAAiC,CAACK,OAAD,CAAjC,CAAD,CAFR,CAAP;IAID;EA3CH;;EAAA;AAAA;;;mBAAaT,cAAYc;AAAA;;;SAAZd;EAAYe,SAAZf,YAAY","names":["environment","HttpClient","catchError","HttpErrorHandler","OwnerService","http","httpErrorHandler","REST_API_URL","handlerError","createHandleError","get","entityUrl","pipe","ownerId","owner","post","put","delete","i0","factory"],"sourceRoot":"","sources":["/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/src/app/owners/owner.service.ts"],"sourcesContent":["/*\n *\n *  * Copyright 2016-2017 the original author or authors.\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *      http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */\n\n/**\n * @author Vitaliy Fedoriv\n */\n\nimport {Injectable} from '@angular/core';\nimport {Owner} from './owner';\nimport {Observable} from 'rxjs';\nimport {environment} from '../../environments/environment';\nimport {HttpClient} from '@angular/common/http';\nimport {catchError} from 'rxjs/operators';\nimport {HandleError, HttpErrorHandler} from '../error.service';\n\n\n@Injectable()\nexport class OwnerService {\n\n  entityUrl = environment.REST_API_URL + 'owners';\n\n  private readonly handlerError: HandleError;\n\n  constructor(private http: HttpClient, private httpErrorHandler: HttpErrorHandler) {\n    this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n  }\n\n  getOwners(): Observable<Owner[]> {\n    return this.http.get<Owner[]>(this.entityUrl)\n      .pipe(\n        catchError(this.handlerError('getOwners', []))\n      );\n  }\n\n  getOwnerById(ownerId: string): Observable<Owner> {\n    return this.http.get<Owner>(this.entityUrl + '/' + ownerId)\n      .pipe(\n          catchError(this.handlerError('getOwnerById', {} as Owner))\n      );\n  }\n\n  addOwner(owner: Owner): Observable<Owner> {\n    return this.http.post<Owner>(this.entityUrl, owner)\n      .pipe(\n        catchError(this.handlerError('addOwner', owner))\n      );\n  }\n\n  updateOwner(ownerId: string, owner: Owner): Observable<{}> {\n    return this.http.put<Owner>(this.entityUrl + '/' + ownerId, owner)\n      .pipe(\n        catchError(this.handlerError('updateOwner', owner))\n      );\n  }\n\n  deleteOwner(ownerId: string): Observable<{}> {\n    return this.http.delete<Owner>(this.entityUrl + '/' + ownerId)\n      .pipe(\n         catchError(this.handlerError('deleteOwner', [ownerId]))\n      );\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}