{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { environment } from \"../../environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { HttpErrorHandler } from \"../error.service\";\nimport { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport var VetService = /*#__PURE__*/function () {\n  function VetService(http, httpErrorHandler) {\n    _classCallCheck(this, VetService);\n\n    this.http = http;\n    this.httpErrorHandler = httpErrorHandler;\n    this.entityUrl = environment.REST_API_URL + \"vets\";\n    this.handlerError = httpErrorHandler.createHandleError(\"OwnerService\");\n  }\n\n  _createClass(VetService, [{\n    key: \"getVets\",\n    value: function getVets() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError(\"getVets\", [])));\n    }\n  }, {\n    key: \"getVetById\",\n    value: function getVetById(vetId) {\n      return this.http.get(this.entityUrl + \"/\" + vetId).pipe(catchError(this.handlerError(\"getVetById\", {})));\n    }\n  }, {\n    key: \"updateVet\",\n    value: function updateVet(vetId, vet) {\n      return this.http.put(this.entityUrl + \"/\" + vetId, vet).pipe(catchError(this.handlerError(\"updateVet\", vet)));\n    }\n  }, {\n    key: \"addVet\",\n    value: function addVet(vet) {\n      return this.http.post(this.entityUrl, vet).pipe(catchError(this.handlerError(\"addVet\", vet)));\n    }\n  }, {\n    key: \"deleteVet\",\n    value: function deleteVet(vetId) {\n      return this.http.delete(this.entityUrl + \"/\" + vetId).pipe(catchError(this.handlerError(\"deleteVet\", 0)));\n    }\n  }]);\n\n  return VetService;\n}();\n\nVetService.ɵfac = function VetService_Factory(t) {\n  return new (t || VetService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n};\n\nVetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VetService,\n  factory: VetService.ɵfac\n});","map":{"version":3,"mappings":";;AAuBA,SAASA,WAAT,QAA4B,gCAA5B;AAGA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,MAA3B;;;;AAGA,WAAaC,UAAb;EAKE,oBACUC,IADV,EAEUC,gBAFV,EAE4C;IAAA;;IADlC;IACA;IANV,iBAAYN,WAAW,CAACO,YAAZ,GAA2B,MAAvC;IAQE,KAAKC,YAAL,GAAoBF,gBAAgB,CAACG,iBAAjB,CAAmC,cAAnC,CAApB;EACD;;EAVH;IAAA;IAAA,OAYE,mBAAO;MACL,OAAO,KAAKJ,IAAL,CACJK,GADI,CACO,KAAKC,SADZ,EAEJC,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,SAAlB,EAA6B,EAA7B,CAAD,CAFX,CAAP;IAGD;EAhBH;IAAA;IAAA,OAkBE,oBAAWK,KAAX,EAAwB;MACtB,OAAO,KAAKR,IAAL,CACJK,GADI,CACK,KAAKC,SAAL,GAAiB,GAAjB,GAAuBE,KAD5B,EAEJD,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,YAAlB,EAAgC,EAAhC,CAAD,CAFX,CAAP;IAGD;EAtBH;IAAA;IAAA,OAwBE,mBAAUK,KAAV,EAAyBC,GAAzB,EAAiC;MAC/B,OAAO,KAAKT,IAAL,CACJU,GADI,CACK,KAAKJ,SAAL,GAAiB,GAAjB,GAAuBE,KAD5B,EACmCC,GADnC,EAEJF,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,WAAlB,EAA+BM,GAA/B,CAAD,CAFX,CAAP;IAGD;EA5BH;IAAA;IAAA,OA8BE,gBAAOA,GAAP,EAAe;MACb,OAAO,KAAKT,IAAL,CACJW,IADI,CACM,KAAKL,SADX,EACsBG,GADtB,EAEJF,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,QAAlB,EAA4BM,GAA5B,CAAD,CAFX,CAAP;IAGD;EAlCH;IAAA;IAAA,OAoCE,mBAAUD,KAAV,EAAuB;MACrB,OAAO,KAAKR,IAAL,CACJY,MADI,CACW,KAAKN,SAAL,GAAiB,GAAjB,GAAuBE,KADlC,EAEJD,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,WAAlB,EAA+B,CAA/B,CAAD,CAFX,CAAP;IAGD;EAxCH;;EAAA;AAAA;;;mBAAaJ,YAAUc;AAAA;;;SAAVd;EAAUe,SAAVf,UAAU","names":["environment","HttpClient","HttpErrorHandler","catchError","VetService","http","httpErrorHandler","REST_API_URL","handlerError","createHandleError","get","entityUrl","pipe","vetId","vet","put","post","delete","i0","factory"],"sourceRoot":"","sources":["/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/src/app/vets/vet.service.ts"],"sourcesContent":["/*\n *\n *  * Copyright 2016-2017 the original author or authors.\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *      http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */\n\n/**\n * @author Vitaliy Fedoriv\n */\n\nimport { Injectable } from \"@angular/core\";\nimport { environment } from \"../../environments/environment\";\nimport { Observable } from \"rxjs\";\nimport { Vet } from \"./vet\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { HandleError, HttpErrorHandler } from \"../error.service\";\nimport { catchError } from \"rxjs\";\n\n@Injectable()\nexport class VetService {\n  entityUrl = environment.REST_API_URL + \"vets\";\n\n  private readonly handlerError: HandleError;\n\n  constructor(\n    private http: HttpClient,\n    private httpErrorHandler: HttpErrorHandler\n  ) {\n    this.handlerError = httpErrorHandler.createHandleError(\"OwnerService\");\n  }\n\n  getVets(): Observable<Vet[]> {\n    return this.http\n      .get<Vet[]>(this.entityUrl)\n      .pipe(catchError(this.handlerError(\"getVets\", [])));\n  }\n\n  getVetById(vetId: string): Observable<Vet> {\n    return this.http\n      .get<Vet>(this.entityUrl + \"/\" + vetId)\n      .pipe(catchError(this.handlerError(\"getVetById\", {} as Vet)));\n  }\n\n  updateVet(vetId: string, vet: Vet): Observable<Vet> {\n    return this.http\n      .put<Vet>(this.entityUrl + \"/\" + vetId, vet)\n      .pipe(catchError(this.handlerError(\"updateVet\", vet)));\n  }\n\n  addVet(vet: Vet): Observable<Vet> {\n    return this.http\n      .post<Vet>(this.entityUrl, vet)\n      .pipe(catchError(this.handlerError(\"addVet\", vet)));\n  }\n\n  deleteVet(vetId: string): Observable<number> {\n    return this.http\n      .delete<number>(this.entityUrl + \"/\" + vetId)\n      .pipe(catchError(this.handlerError(\"deleteVet\", 0)));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}