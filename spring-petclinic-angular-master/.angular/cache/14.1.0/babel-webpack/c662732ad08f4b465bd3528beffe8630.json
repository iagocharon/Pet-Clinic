{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { environment } from \"../../environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { HttpErrorHandler } from \"../error.service\";\nimport { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport var VetService = /*#__PURE__*/(function () {\n  var VetService = /*#__PURE__*/function () {\n    function VetService(http, httpErrorHandler) {\n      _classCallCheck(this, VetService);\n\n      this.http = http;\n      this.httpErrorHandler = httpErrorHandler;\n      this.entityUrl = environment.REST_API_URL + \"vets\";\n      this.handlerError = httpErrorHandler.createHandleError(\"OwnerService\");\n    }\n\n    _createClass(VetService, [{\n      key: \"getVets\",\n      value: function getVets() {\n        return this.http.get(this.entityUrl).pipe(catchError(this.handlerError(\"getVets\", [])));\n      }\n    }, {\n      key: \"getVetById\",\n      value: function getVetById(vetId) {\n        return this.http.get(this.entityUrl + \"/\" + vetId).pipe(catchError(this.handlerError(\"getVetById\", {})));\n      }\n    }, {\n      key: \"updateVet\",\n      value: function updateVet(vetId, vet) {\n        return this.http.put(this.entityUrl + \"/\" + vetId, vet).pipe(catchError(this.handlerError(\"updateVet\", vet)));\n      }\n    }, {\n      key: \"addVet\",\n      value: function addVet(vet) {\n        return this.http.post(this.entityUrl, vet).pipe(catchError(this.handlerError(\"addVet\", vet)));\n      }\n    }, {\n      key: \"deleteVet\",\n      value: function deleteVet(vetId) {\n        return this.http.delete(this.entityUrl + \"/\" + vetId).pipe(catchError(this.handlerError(\"deleteVet\", 0)));\n      }\n    }]);\n\n    return VetService;\n  }();\n\n  VetService.ɵfac = function VetService_Factory(t) {\n    return new (t || VetService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n  };\n\n  VetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VetService,\n    factory: VetService.ɵfac\n  });\n  return VetService;\n})();","map":null,"metadata":{},"sourceType":"module"}