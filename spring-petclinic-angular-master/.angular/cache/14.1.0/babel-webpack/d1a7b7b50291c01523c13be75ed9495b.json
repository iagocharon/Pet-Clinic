{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { environment } from \"../../environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\nimport { HttpErrorHandler } from \"../error.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport var PetTypeService = /*#__PURE__*/function () {\n  function PetTypeService(http, httpErrorHandler) {\n    _classCallCheck(this, PetTypeService);\n\n    this.http = http;\n    this.httpErrorHandler = httpErrorHandler;\n    this.entityUrl = environment.REST_API_URL + \"pettypes\";\n    this.handlerError = httpErrorHandler.createHandleError(\"OwnerService\");\n  }\n\n  _createClass(PetTypeService, [{\n    key: \"getPetTypes\",\n    value: function getPetTypes() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError(\"getPetTypes\", [])));\n    }\n  }, {\n    key: \"getPetTypeById\",\n    value: function getPetTypeById(typeId) {\n      return this.http.get(this.entityUrl + \"/\" + typeId).pipe(catchError(this.handlerError(\"getPetTypeById\", {})));\n    }\n  }, {\n    key: \"updatePetType\",\n    value: function updatePetType(typeId, petType) {\n      return this.http.put(this.entityUrl + \"/\" + typeId, petType).pipe(catchError(this.handlerError(\"updatePetType\", petType)));\n    }\n  }, {\n    key: \"addPetType\",\n    value: function addPetType(petType) {\n      return this.http.post(this.entityUrl, petType).pipe(catchError(this.handlerError(\"addPetType\", petType)));\n    }\n  }, {\n    key: \"deletePetType\",\n    value: function deletePetType(typeId) {\n      return this.http.delete(this.entityUrl + \"/\" + typeId).pipe(catchError(this.handlerError(\"deletePetType\", 0)));\n    }\n  }]);\n\n  return PetTypeService;\n}();\n\nPetTypeService.ɵfac = function PetTypeService_Factory(t) {\n  return new (t || PetTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n};\n\nPetTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PetTypeService,\n  factory: PetTypeService.ɵfac\n});","map":{"version":3,"mappings":";;AAuBA,SAASA,WAAT,QAA4B,gCAA5B;AAGA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAAsBC,gBAAtB,QAA8C,kBAA9C;;;;AAGA,WAAaC,cAAb;EAKE,wBACUC,IADV,EAEUC,gBAFV,EAE4C;IAAA;;IADlC;IACA;IANV,iBAAYN,WAAW,CAACO,YAAZ,GAA2B,UAAvC;IAQE,KAAKC,YAAL,GAAoBF,gBAAgB,CAACG,iBAAjB,CAAmC,cAAnC,CAApB;EACD;;EAVH;IAAA;IAAA,OAYE,uBAAW;MACT,OAAO,KAAKJ,IAAL,CACJK,GADI,CACW,KAAKC,SADhB,EAEJC,IAFI,CAECV,UAAU,CAAC,KAAKM,YAAL,CAAkB,aAAlB,EAAiC,EAAjC,CAAD,CAFX,CAAP;IAGD;EAhBH;IAAA;IAAA,OAkBE,wBAAeK,MAAf,EAA6B;MAC3B,OAAO,KAAKR,IAAL,CACJK,GADI,CACS,KAAKC,SAAL,GAAiB,GAAjB,GAAuBE,MADhC,EAEJD,IAFI,CAECV,UAAU,CAAC,KAAKM,YAAL,CAAkB,gBAAlB,EAAoC,EAApC,CAAD,CAFX,CAAP;IAGD;EAtBH;IAAA;IAAA,OAwBE,uBAAcK,MAAd,EAA8BC,OAA9B,EAA8C;MAC5C,OAAO,KAAKT,IAAL,CACJU,GADI,CACS,KAAKJ,SAAL,GAAiB,GAAjB,GAAuBE,MADhC,EACwCC,OADxC,EAEJF,IAFI,CAECV,UAAU,CAAC,KAAKM,YAAL,CAAkB,eAAlB,EAAmCM,OAAnC,CAAD,CAFX,CAAP;IAGD;EA5BH;IAAA;IAAA,OA8BE,oBAAWA,OAAX,EAA2B;MACzB,OAAO,KAAKT,IAAL,CACJW,IADI,CACU,KAAKL,SADf,EAC0BG,OAD1B,EAEJF,IAFI,CAECV,UAAU,CAAC,KAAKM,YAAL,CAAkB,YAAlB,EAAgCM,OAAhC,CAAD,CAFX,CAAP;IAGD;EAlCH;IAAA;IAAA,OAoCE,uBAAcD,MAAd,EAA4B;MAC1B,OAAO,KAAKR,IAAL,CACJY,MADI,CACW,KAAKN,SAAL,GAAiB,GAAjB,GAAuBE,MADlC,EAEJD,IAFI,CAECV,UAAU,CAAC,KAAKM,YAAL,CAAkB,eAAlB,EAAmC,CAAnC,CAAD,CAFX,CAAP;IAGD;EAxCH;;EAAA;AAAA;;;mBAAaJ,gBAAcc;AAAA;;;SAAdd;EAAce,SAAdf,cAAc","names":["environment","HttpClient","catchError","HttpErrorHandler","PetTypeService","http","httpErrorHandler","REST_API_URL","handlerError","createHandleError","get","entityUrl","pipe","typeId","petType","put","post","delete","i0","factory"],"sourceRoot":"","sources":["/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/src/app/pettypes/pettype.service.ts"],"sourcesContent":["/*\n *\n *  * Copyright 2016-2017 the original author or authors.\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *      http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */\n\n/**\n * @author Vitaliy Fedoriv\n */\n\nimport { Injectable } from \"@angular/core\";\nimport { environment } from \"../../environments/environment\";\nimport { Observable } from \"rxjs\";\nimport { PetType } from \"./pettype\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\nimport { HandleError, HttpErrorHandler } from \"../error.service\";\n\n@Injectable()\nexport class PetTypeService {\n  entityUrl = environment.REST_API_URL + \"pettypes\";\n\n  private readonly handlerError: HandleError;\n\n  constructor(\n    private http: HttpClient,\n    private httpErrorHandler: HttpErrorHandler\n  ) {\n    this.handlerError = httpErrorHandler.createHandleError(\"OwnerService\");\n  }\n\n  getPetTypes(): Observable<PetType[]> {\n    return this.http\n      .get<PetType[]>(this.entityUrl)\n      .pipe(catchError(this.handlerError(\"getPetTypes\", [])));\n  }\n\n  getPetTypeById(typeId: string): Observable<PetType> {\n    return this.http\n      .get<PetType>(this.entityUrl + \"/\" + typeId)\n      .pipe(catchError(this.handlerError(\"getPetTypeById\", {} as PetType)));\n  }\n\n  updatePetType(typeId: string, petType: PetType): Observable<PetType> {\n    return this.http\n      .put<PetType>(this.entityUrl + \"/\" + typeId, petType)\n      .pipe(catchError(this.handlerError(\"updatePetType\", petType)));\n  }\n\n  addPetType(petType: PetType): Observable<PetType> {\n    return this.http\n      .post<PetType>(this.entityUrl, petType)\n      .pipe(catchError(this.handlerError(\"addPetType\", petType)));\n  }\n\n  deletePetType(typeId: string): Observable<number> {\n    return this.http\n      .delete<number>(this.entityUrl + \"/\" + typeId)\n      .pipe(catchError(this.handlerError(\"deletePetType\", 0)));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}