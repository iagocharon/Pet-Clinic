{"ast":null,"code":"import _classCallCheck from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { environment } from \"../../environments/environment\";\nimport { HttpErrorHandler } from \"../error.service\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport var VisitService = /*#__PURE__*/function () {\n  function VisitService(http, httpErrorHandler) {\n    _classCallCheck(this, VisitService);\n\n    this.http = http;\n    this.httpErrorHandler = httpErrorHandler;\n    this.entityUrl = environment.REST_API_URL + \"visits\";\n    this.handlerError = httpErrorHandler.createHandleError(\"OwnerService\");\n  }\n\n  _createClass(VisitService, [{\n    key: \"getVisits\",\n    value: function getVisits() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError(\"getVisits\", [])));\n    }\n  }, {\n    key: \"getVisitById\",\n    value: function getVisitById(visitId) {\n      return this.http.get(this.entityUrl + \"/\" + visitId).pipe(catchError(this.handlerError(\"getVisitById\", {})));\n    }\n  }, {\n    key: \"addVisit\",\n    value: function addVisit(visit) {\n      return this.http.post(this.entityUrl, visit).pipe(catchError(this.handlerError(\"addVisit\", visit)));\n    }\n  }, {\n    key: \"updateVisit\",\n    value: function updateVisit(visitId, visit) {\n      return this.http.put(this.entityUrl + \"/\" + visitId, visit).pipe(catchError(this.handlerError(\"updateVisit\", visit)));\n    }\n  }, {\n    key: \"deleteVisit\",\n    value: function deleteVisit(visitId) {\n      return this.http.delete(this.entityUrl + \"/\" + visitId).pipe(catchError(this.handlerError(\"deleteVisit\", 0)));\n    }\n  }]);\n\n  return VisitService;\n}();\n\nVisitService.ɵfac = function VisitService_Factory(t) {\n  return new (t || VisitService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n};\n\nVisitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VisitService,\n  factory: VisitService.ɵfac\n});","map":{"version":3,"mappings":";;AAyBA,SAASA,WAAT,QAA4B,gCAA5B;AACA,SAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,UAAT,QAA2B,MAA3B;;;;AAGA,WAAaC,YAAb;EAKE,sBACUC,IADV,EAEUC,gBAFV,EAE4C;IAAA;;IADlC;IACA;IANF,iBAAYN,WAAW,CAACO,YAAZ,GAA2B,QAAvC;IAQN,KAAKC,YAAL,GAAoBF,gBAAgB,CAACG,iBAAjB,CAAmC,cAAnC,CAApB;EACD;;EAVH;IAAA;IAAA,OAYE,qBAAS;MACP,OAAO,KAAKJ,IAAL,CACJK,GADI,CACS,KAAKC,SADd,EAEJC,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,WAAlB,EAA+B,EAA/B,CAAD,CAFX,CAAP;IAGD;EAhBH;IAAA;IAAA,OAkBE,sBAAaK,OAAb,EAA4B;MAC1B,OAAO,KAAKR,IAAL,CACJK,GADI,CACO,KAAKC,SAAL,GAAiB,GAAjB,GAAuBE,OAD9B,EAEJD,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,cAAlB,EAAkC,EAAlC,CAAD,CAFX,CAAP;IAGD;EAtBH;IAAA;IAAA,OAwBE,kBAASM,KAAT,EAAqB;MACnB,OAAO,KAAKT,IAAL,CACJU,IADI,CACQ,KAAKJ,SADb,EACwBG,KADxB,EAEJF,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,UAAlB,EAA8BM,KAA9B,CAAD,CAFX,CAAP;IAGD;EA5BH;IAAA;IAAA,OA8BE,qBAAYD,OAAZ,EAA6BC,KAA7B,EAAyC;MACvC,OAAO,KAAKT,IAAL,CACJW,GADI,CACO,KAAKL,SAAL,GAAiB,GAAjB,GAAuBE,OAD9B,EACuCC,KADvC,EAEJF,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,aAAlB,EAAiCM,KAAjC,CAAD,CAFX,CAAP;IAGD;EAlCH;IAAA;IAAA,OAoCE,qBAAYD,OAAZ,EAA2B;MACzB,OAAO,KAAKR,IAAL,CACJY,MADI,CACW,KAAKN,SAAL,GAAiB,GAAjB,GAAuBE,OADlC,EAEJD,IAFI,CAECT,UAAU,CAAC,KAAKK,YAAL,CAAkB,aAAlB,EAAiC,CAAjC,CAAD,CAFX,CAAP;IAGD;EAxCH;;EAAA;AAAA;;;mBAAaJ,cAAYc;AAAA;;;SAAZd;EAAYe,SAAZf,YAAY","names":["environment","HttpErrorHandler","HttpClient","catchError","VisitService","http","httpErrorHandler","REST_API_URL","handlerError","createHandleError","get","entityUrl","pipe","visitId","visit","post","put","delete","i0","factory"],"sourceRoot":"","sources":["/Users/IAGO/Desktop/Portfolio/Veterinaria/spring-petclinic-angular-master/src/app/visits/visit.service.ts"],"sourcesContent":["/*\n *\n *  * Copyright 2016-2017 the original author or authors.\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *      http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */\n\n/**\n * @author Vitaliy Fedoriv\n */\n\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { Visit } from \"./visit\";\nimport { environment } from \"../../environments/environment\";\nimport { HandleError, HttpErrorHandler } from \"../error.service\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\n\n@Injectable()\nexport class VisitService {\n  private entityUrl = environment.REST_API_URL + \"visits\";\n\n  private readonly handlerError: HandleError;\n\n  constructor(\n    private http: HttpClient,\n    private httpErrorHandler: HttpErrorHandler\n  ) {\n    this.handlerError = httpErrorHandler.createHandleError(\"OwnerService\");\n  }\n\n  getVisits(): Observable<Visit[]> {\n    return this.http\n      .get<Visit[]>(this.entityUrl)\n      .pipe(catchError(this.handlerError(\"getVisits\", [])));\n  }\n\n  getVisitById(visitId: string): Observable<Visit> {\n    return this.http\n      .get<Visit>(this.entityUrl + \"/\" + visitId)\n      .pipe(catchError(this.handlerError(\"getVisitById\", {} as Visit)));\n  }\n\n  addVisit(visit: Visit): Observable<Visit> {\n    return this.http\n      .post<Visit>(this.entityUrl, visit)\n      .pipe(catchError(this.handlerError(\"addVisit\", visit)));\n  }\n\n  updateVisit(visitId: string, visit: Visit): Observable<Visit> {\n    return this.http\n      .put<Visit>(this.entityUrl + \"/\" + visitId, visit)\n      .pipe(catchError(this.handlerError(\"updateVisit\", visit)));\n  }\n\n  deleteVisit(visitId: string): Observable<number> {\n    return this.http\n      .delete<number>(this.entityUrl + \"/\" + visitId)\n      .pipe(catchError(this.handlerError(\"deleteVisit\", 0)));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}